runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
shiny::runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
#############
#Load packages
##############
library(data.table)
library(dplyr)
library(emmeans)
library(extrafont)
library(ggnewscale)
library(ggplot2)
library(ggtree)
library(grid)
library(gridExtra)
library(gtable)
library(mgcv)
library(multcomp)
library(nlme)
library(nlraa)
library(svMisc)
library(tidyr)
#################
#Define functions
#################
#' Create Plot with Fixed Dimensions
#'
#'This function creates a plot with fixed dimensions for x-axis, y-axis, and panel
#'A standard ggplot2 object does not have a constant y-axis width; it varies with the font and number of characters in the axis labels
#'The same is true for other dimensions
#'This is a problem when trying to keep plots uniform
#' @param p A plot (ggplot2 object)
#' @param A Width of y-axis (inches)
#' @param B Width of x-axis (and panel) (inches)
#' @param C Height of y-axis (and panel) (inches)
#' @param D Height of x-axis (inches)
#' @return
#' @export
plot_with_fixed_dimensions = function(p, A, B, C, D, t=0, fp)
{
#Get plot and extract elements
g = ggplotGrob(p)
y_axis <- gtable_filter(g, 'axis-l|ylab', trim=T, invert=FALSE)
panel <- gtable_filter(g, 'panel', trim=T, invert=FALSE)
x_axis <- gtable_filter(g, 'axis-b|xlab', trim=T, invert=FALSE)
#Change layout of y and x axes
#plot(y_axis)
#y_axis$layout
#gtable_show_layout(y_axis)
y_axis$layout[1]=c(1,1,1)
y_axis$layout[2]=c(5,1,2)
y_axis$layout[3]=c(1,1,1)
y_axis$layout[4]=c(5,1,2)
#plot(y_axis)
#plot(x_axis)
#y_axis$layout
#gtable_show_layout(x_axis)
x_axis$layout[1]=c(2,1,5)
x_axis$layout[2]=c(1,1,1)
x_axis$layout[3]=c(2,1,5)
x_axis$layout[4]=c(1,1,1)
#plot(x_axis)
#Arrange elements into panel with fixed dimensions
grobs = list(y_axis, #1
panel, #2
x_axis) #3
layout_matrix = rbind(c(NA, NA),
c(1, 2),
c(NA,3))
#Define dimensions of panel
panel = grid.arrange(grobs = grobs, layout_matrix=layout_matrix, widths=c(A,B), heights=c(t,C,D))
ggsave(fp, device= cairo_pdf, plot=panel, width=A+B, height=C+D, units="in", bg="transparent")
}
#' Create Legend with Fixed Dimensions
#'
#' @param
#' @return
#' @export
plot_legend = function(p, A, B, fp)
{
#Format legend
p = p + theme(legend.title = element_blank())
#Get plot and extract elements
g = ggplotGrob(p)
y_axis <- gtable_filter(g, 'axis-l|ylab', trim=T, invert=FALSE)
panel <- gtable_filter(g, 'panel', trim=T, invert=FALSE)
x_axis <- gtable_filter(g, 'axis-b|xlab', trim=T, invert=FALSE)
legend <- gtable_filter(g, 'guide-box', trim=T, invert=FALSE)
#Arrange elements into panel with fixed dimensiond
grobs = list(legend)
layout_matrix = as.matrix(1)
#Define dimensions of panel
panel = grid.arrange(grobs = grobs, layout_matrix=layout_matrix, widths=c(A), heights=c(B))
ggsave(fp, device= cairo_pdf, plot=panel, width=A, height=B, units="in", bg="transparent")
}
#Make colors whiter (makes colors as white as changing when alpha in ggplot, but does not make them transparent to background)
whiten_colors = function(color_palette, alpha_no_transparency){
rgb2hex = function(r,g,b) rgb(r, g, b, maxColorValue = 255)
color_palette_whitened = vector()
for(i in 1:length(color_palette))
{
color_whitened = col2rgb(color_palette[i])
color_whitened = 255-((255-color_whitened)*alpha_no_transparency)
color_whitened = round(color_whitened,0)
color_whitened = t(color_whitened)
color_whitened = rgb2hex(color_whitened[1,1],color_whitened[1,2],color_whitened[1,3])
color_palette_whitened[i] = color_whitened
}
return(color_palette_whitened)
}
#Round number to nearest target value
round_to_nearest <- function(value, targets) {
targets[which.min(abs(targets - value))]
}
#########################
#Load and configure fonts
#########################
#Load fonts
#font_import()
#loadfonts(device = "win")
windowsFonts("Courier New" = windowsFont("Courier New"))
windowsFonts("Arial Narrow" = windowsFont("Arial Narrow"))
windowsFonts("Arial" = windowsFont("Arial"))
######################
#Load and prepare data
######################
df1 = read.csv("G:\\My Drive\\manuscripts\\2024 energetic efficiency in fermenters\\R\\response to dilution rate--12 Nov 24.csv", sep=",", header=TRUE, na.strings = "")
df2 = read.csv("G:\\My Drive\\manuscripts\\2024 energetic efficiency in fermenters\\R\\values in Isaacson et al. 1975--14 Aug 24.csv", sep=",", header=TRUE, na.strings = "")
#######################################
##Process data for Lingga et al. (2024)
#######################################
data = df1
#Remove "/" from units (creates illegal file name when outputting plot)
data$Units = gsub(pattern="/", replacement="_per_", x=data$Units)
#Remove outliers
##Unusually low digestibility of cellulose
data = data %>% dplyr::filter(!(Day==8&Fermenter==4&Trial==2))
##Unusually low digestibility of cellulose
data = data %>% dplyr::filter(!(Day==9&Fermenter==8&Trial==2))
##Unusually low outflow of VFA
data = data %>% dplyr::filter(!(Day==11&Fermenter==6&Trial==3))
# Capture original identifier columns (excluding 'Value' and 'Units')
original_cols <- names(data)[!names(data) %in% c("Value", "Units")]
# Convert to wide format
data_wide <- data %>% pivot_wider(names_from = Units, values_from = Value)
data_wide$`Lactic_acid_(mM)` = data_wide$`Lactic_acid_(g_per_L)`*1000 / 90.08
data_wide$`Total_DM_(g_per_day)` <- data_wide$`Cellulose_DM_(g_per_day)` +  data_wide$`Glucose_DM_(g_per_day)` + data_wide$`Buffer_DM_(g_per_day)`
`Fermenter_volume_(L)` = 1.85
data_wide$`Total_outflow_(g_per_day)` = data_wide$Dilution * `Fermenter_volume_(L)`  * 24 / 100 * 1000
#The meaning of the value below is unclear
`Cellulose_NDF_(g_per_g)` = 0.9849
data_wide$`NDF_DM_(g_per_day)` <- data_wide$`Cellulose_DM_(g_per_day)`* `Cellulose_NDF_(g_per_g)`
data_wide$`Effluent_NDF_(g_per_day)` <- data_wide$`Effluent_DM_(g_per_day)`* data_wide$`Effluent_NDF_(g_per_g)`
`Microbial_NDF_(g_per_g)` = 0.053333331
data_wide$`Microbial_NDF_(g_per_day)` <- data_wide$`Microbial_DM_(g_per_day)` * `Microbial_NDF_(g_per_g)`
data_wide$`Effluent_cellulose_(g_per_day)` <-  data_wide$`Effluent_NDF_(g_per_day)` - data_wide$`Microbial_NDF_(g_per_day)`
data_wide$`Effluent_cellulose_(g_per_day)` = if_else(data_wide$Carbohydrate=="Cellulose",data_wide$`Effluent_cellulose_(g_per_day)`,0)
data_wide$`Cellulose_digested_(mol_per_day)` <- (data_wide$`Cellulose_DM_(g_per_day)` - data_wide$`Effluent_cellulose_(g_per_day)`)/ 162.1406
#Need to update with measured value
data_wide$`Effluent_glucose_(g_per_day)` <- 0
data_wide$`Glucose_digested_(mol_per_day)` <- (data_wide$`Glucose_DM_(g_per_day)`- data_wide$`Effluent_glucose_(g_per_day)`)/ 180.156
#Need to update with measured value
data_wide$`Glucose_True_Digestibility_(g_per_100_g)` <- 1*100
data_wide$`Glucose_True_Digestibility_(g_per_100_g)` <- if_else(data_wide$Carbohydrate=="Glucose",data_wide$`Glucose_True_Digestibility_(g_per_100_g)`,NA)
data_wide$`NDF_Apparent_Digestibility_(g_per_100_g)` <- (1 - data_wide$`Effluent_NDF_(g_per_day)` / data_wide$`NDF_DM_(g_per_day)`)*100
data_wide$`NDF_True_Digestibility_(g_per_100_g)` <- (1 - data_wide$`Effluent_cellulose_(g_per_day)` / data_wide$`NDF_DM_(g_per_day)`)*100
data_wide$`NDF_True_Digestibility_(g_per_100_g)` <- (if_else(data_wide$Carbohydrate=="Cellulose",data_wide$`NDF_True_Digestibility_(g_per_100_g)`,NA))
data_wide$`DM_Apparent_Digestibility_(g_per_100_g)` <- 1 - (data_wide$`Effluent_DM_(g_per_day)` / data_wide$`Total_DM_(g_per_day)`)*100
data_wide$`DM_True_Digestibility_(g_per_100_g)` <- (data_wide$`Total_DM_(g_per_day)`- (data_wide$`Effluent_DM_(g_per_day)` -  data_wide$`Microbial_DM_(g_per_day)`)) / data_wide$`Total_DM_(g_per_day)`*100
data_wide$`NDF_digestion_rate(percent_per_h)` <- data_wide$`NDF_Apparent_Digestibility_(g_per_100_g)`*data_wide$`Dilution`/(100-data_wide$`NDF_Apparent_Digestibility_(g_per_100_g)`)
`Digested_hexose_fermented_(mol_per_mol)` = 0.92
data_wide$`Glucose_fermented_(mol_per_day)` <- data_wide$`Glucose_digested_(mol_per_day)`*`Digested_hexose_fermented_(mol_per_mol)`
data_wide$`Cellulose_fermented_(mol_per_day)` <- data_wide$`Cellulose_digested_(mol_per_day)`*`Digested_hexose_fermented_(mol_per_mol)`
data_wide$`Hexose_fermented_(mol_per_day)` <- data_wide$`Glucose_fermented_(mol_per_day)`+ data_wide$`Cellulose_fermented_(mol_per_day)`
data_wide$`Total_VFA_(mM)` = ((data_wide$`Fermenter_Acetate_(mM)` - data_wide$`Buffer_Acetate_(mM)`)+
(data_wide$`Fermenter_Propionate_(mM)` - data_wide$`Buffer_Propionate_(mM)`) +
(data_wide$`Fermenter_Isobutyrate_(mM)` - data_wide$`Buffer_Isobutyrate_(mM)`) +
(data_wide$`Fermenter_Butyrate_(mM)` - data_wide$`Buffer_Butyrate_(mM)`) +
(data_wide$`Fermenter_Isovalerate_(mM)` - data_wide$`Buffer_Isovalerate_(mM)`) +
(data_wide$`Fermenter_Valerate_(mM)` - data_wide$`Buffer_Valerate_(mM)`) +
(data_wide$`Fermenter_Caproate_(mM)`- data_wide$`Buffer_Caproate_(mM)`))
data_wide$`Methane_(mM)` <- ((data_wide$`Fermenter_Acetate_(mM)` - data_wide$`Buffer_Acetate_(mM)`) * 1 +
(data_wide$`Fermenter_Propionate_(mM)` - data_wide$`Buffer_Propionate_(mM)`) * -0.5 +
(data_wide$`Fermenter_Isobutyrate_(mM)` - data_wide$`Buffer_Isobutyrate_(mM)`) * 0.5 +
(data_wide$`Fermenter_Butyrate_(mM)` - data_wide$`Buffer_Butyrate_(mM)`) * 0.5 +
(data_wide$`Fermenter_Isovalerate_(mM)` - data_wide$`Buffer_Isovalerate_(mM)`)* -0.25 +
(data_wide$`Fermenter_Valerate_(mM)` - data_wide$`Buffer_Valerate_(mM)`) * -0.25 +
(data_wide$`Fermenter_Caproate_(mM)`- data_wide$`Buffer_Caproate_(mM)`) * 0.5 +
(data_wide$`Lactic_acid_(mM)`*0))
data_wide$`CO2_(mM)` <- ((data_wide$`Fermenter_Acetate_(mM)` - data_wide$`Buffer_Acetate_(mM)`) * 2 +
(data_wide$`Fermenter_Propionate_(mM)` - data_wide$`Buffer_Propionate_(mM)`) * 0 +
(data_wide$`Fermenter_Isobutyrate_(mM)` - data_wide$`Buffer_Isobutyrate_(mM)`) * 2 +
(data_wide$`Fermenter_Butyrate_(mM)` - data_wide$`Buffer_Butyrate_(mM)`) * 2 +
(data_wide$`Fermenter_Isovalerate_(mM)` - data_wide$`Buffer_Isovalerate_(mM)`)* 1 +
(data_wide$`Fermenter_Valerate_(mM)` - data_wide$`Buffer_Valerate_(mM)`) * 1 +
(data_wide$`Fermenter_Caproate_(mM)`- data_wide$`Buffer_Caproate_(mM)`) * 3 +
(data_wide$`Lactic_acid_(mM)`*0) + (data_wide$`Methane_(mM)` * -1))
data_wide$`Acetate_(mol_per_day)` = (data_wide$`Fermenter_Acetate_(mM)` - data_wide$`Buffer_Acetate_(mM)`)*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`Propionate_(mol_per_day)` = (data_wide$`Fermenter_Propionate_(mM)` - data_wide$`Buffer_Propionate_(mM)`)*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`Isobutyrate_(mol_per_day)` = (data_wide$`Fermenter_Isobutyrate_(mM)` - data_wide$`Buffer_Isobutyrate_(mM)`)*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`Butyrate_(mol_per_day)` = (data_wide$`Fermenter_Butyrate_(mM)` - data_wide$`Buffer_Butyrate_(mM)`)*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`Isovalerate_(mol_per_day)` = (data_wide$`Fermenter_Isovalerate_(mM)` - data_wide$`Buffer_Isovalerate_(mM)`)*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`Valerate_(mol_per_day)` = (data_wide$`Fermenter_Valerate_(mM)` - data_wide$`Buffer_Valerate_(mM)`)*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`Caproate_(mol_per_day)` = (data_wide$`Fermenter_Caproate_(mM)`- data_wide$`Buffer_Caproate_(mM)`)*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`Lactic_acid_(mol_per_day)` = data_wide$`Lactic_acid_(mM)`*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`Methane_(mol_per_day)` = data_wide$`Methane_(mM)`*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`CO2_(mol_per_day)` = data_wide$`CO2_(mM)`*data_wide$`Total_outflow_(g_per_day)`/10^3 /10^3
data_wide$`Total_VFA_(mol_per_day)` = (data_wide$`Acetate_(mol_per_day)`+
data_wide$`Propionate_(mol_per_day)`+
data_wide$`Isobutyrate_(mol_per_day)`+
data_wide$`Butyrate_(mol_per_day)`+
data_wide$`Isovalerate_(mol_per_day)`+
data_wide$`Valerate_(mol_per_day)`+
data_wide$`Caproate_(mol_per_day)`+
data_wide$`Lactic_acid_(mol_per_day)`)
data_wide$`ATP_(mol_per_day)` <- (data_wide$`Acetate_(mol_per_day)` * 4 +
data_wide$`Propionate_(mol_per_day)` * 3.5 +
data_wide$`Isobutyrate_(mol_per_day)` * 4.5 +
data_wide$`Butyrate_(mol_per_day)` * 4.5 +
data_wide$`Isovalerate_(mol_per_day)` * 3 +
data_wide$`Valerate_(mol_per_day)` * 3 +
data_wide$`Caproate_(mol_per_day)` * 4.5 +
data_wide$`Lactic_acid_(mol_per_day)`*2 +
data_wide$`Methane_(mol_per_day)` * 1+
data_wide$`Cellulose_fermented_(mol_per_day)`*0.5)
data_wide$`ATP_per_VFA` = data_wide$`ATP_(mol_per_day)`/data_wide$`Total_VFA_(mol_per_day)`
data_wide$`Yield_(g_cells_per_mol_carbohydrate)` <- data_wide$`Microbial_DM_(g_per_day)`/ data_wide$`Hexose_fermented_(mol_per_day)`
data_wide$`Yield_(g_cells_per_mol_ATP)` <- data_wide$`Microbial_DM_(g_per_day)`/ data_wide$`ATP_(mol_per_day)`
`microbial_C_(g_per_g)` = 0.5
data_wide$`C_output_(mol_per_day)` <- (data_wide$`Acetate_(mol_per_day)` * 2 +
data_wide$`Propionate_(mol_per_day)` * 3 +
data_wide$`Isobutyrate_(mol_per_day)` * 4 +
data_wide$`Butyrate_(mol_per_day)` * 4 +
data_wide$`Isovalerate_(mol_per_day)` * 5 +
data_wide$`Valerate_(mol_per_day)` * 5 +
data_wide$`Caproate_(mol_per_day)` * 6 +
data_wide$`Lactic_acid_(mol_per_day)`*2 +
data_wide$`Methane_(mol_per_day)` *1+
data_wide$`CO2_(mol_per_day)` *1+
data_wide$`Microbial_DM_(g_per_day)`*`microbial_C_(g_per_g)`/12.011+
data_wide$`Effluent_glucose_(g_per_day)`/180.156*6+
data_wide$`Effluent_cellulose_(g_per_day)`/162.1406*6
)
data_wide$`C_input_(mol_per_day)` = data_wide$`Glucose_DM_(g_per_day)`/180.156*6+
data_wide$`Cellulose_DM_(g_per_day)`/162.1406*6
data_wide$`C_recovery_(mol_per_mol)` =  data_wide$`C_output_(mol_per_day)`/data_wide$`C_input_(mol_per_day)`
# Now excluding 'Value' and 'Units'
new_cols <- setdiff(names(data_wide), original_cols)
# Keep only the identifier columns and any new columns
cols_to_keep <- c(original_cols, new_cols)
# Convert back to long format
data_modified <- data_wide %>%
dplyr::select(dplyr::all_of(cols_to_keep)) %>%
pivot_longer(cols = !all_of(original_cols), names_to = "Units", values_to = "Value")
# Filter out NA values
data_modified <- data_modified %>% filter(!is.na(Value))
#Update data object
data = data_modified
#Get names of variables
var = unique(data$Units)
#Select variables
data = data %>% dplyr::filter(Units=="Yield_(g_cells_per_mol_carbohydrate)"|Units=="Yield_(g_cells_per_mol_ATP)")
#Summarize by day
data = data %>%
filter(!is.na(Value)) %>%
group_by(Carbohydrate, Trial, Fermenter, Units) %>%
dplyr::summarise(
Dilution = mean(Dilution, na.rm = TRUE),
Value = mean(Value, na.rm = TRUE),
) %>% ungroup()
#Select data for glucose
data = data %>%
filter(Carbohydrate=="Glucose")
#Do additional formatting
data = data %>% dplyr::select(-Carbohydrate)
data = data %>% dplyr::rename(Group = Trial)
data$Study = "Current"
df1 = data
#########################################
##Process data for Isaacson et al. (1975)
#########################################
data = df2
data <- data %>%
mutate(Glucose = recode(Glucose,
`5.8` = 1,
`12.7` = 2,
`9.9` = 3,
`25.0` = 4))
data = data %>% dplyr::rename(Group = Glucose)
data$Study = "Isaacson et al. (1975)"
df2 = data
##############
##Combine data
##############
df1_columns <- colnames(df1)
df2 <- df2[, df1_columns]
df3 <- rbind(df1, df2)
################
#Plot yield data
################
#Get data
df = df3
##
df3 %>% dplyr::filter(Study!="Current") %>% dplyr::filter(Units!="Yield_(g_cells_per_mol_carbohydrate)")
# Get names of variables
var <- unique(df$Units)
study = unique(df$Study)
# Initialize values
df_var <- vector("list", length(var))
model <- vector("list", length(var))
df_pred = vector("list", length(var))
plot = vector("list", length(var))
maintenance_current = vector("list", length(var))
maintenance_Isaacson = vector("list", length(var))
max_yield_current = vector("list", length(var))
max_yield_Isaacson = vector("list", length(var))
emms_m = vector("list", length(var))
emms_Yg = vector("list", length(var))
#Specify colors
#Set colors to match those in Powerpoint
brown_color=rgb(red=132, green=60, blue=12, maxColorValue = 255)
red_color=rgb(red=255, green=0, blue=0, maxColorValue = 255)
orange_color=rgb(red=255, green=192, blue=0, maxColorValue = 255)
green_color=rgb(red=0, green=176, blue=80, maxColorValue = 255)
blue_color=rgb(red=0, green=112, blue=192, maxColorValue = 255)
purple_color=rgb(red=112, green=48, blue=160, maxColorValue = 255)
green_color_whitened = whiten_colors(green_color, alpha_no_transparency=0.05)
red_color_whitened = whiten_colors(red_color, alpha_no_transparency=0.05)
#Format data
for (i in 1:length(var)) {
df_var[[i]] = df
df_var[[i]] = df_var[[i]] %>%
filter(!is.na(Value), Units == var[i]) %>%
group_by(Group, Fermenter, Dilution, Study) %>%
summarise(
Yield = mean(Value, na.rm = TRUE),
.groups = "drop"  # Override the default grouping behavior
) %>%
mutate(
Study = as.factor(Study),
Group = as.factor(Group)
)
}
#Fit model
# for (i in 1:length(var)) {
#   nlme_model <- nlme(
#     Yield ~ 1 / (Maintenance / Dilution + 1 / Max_yield),
#     fixed = list(Maintenance ~ Study, Max_yield ~ Study),
#     random = Maintenance + Max_yield ~ 1 | Study,
#     weights = varPower(),
#     start = c(Maintenance = c(0.05, 0),
#               Max_yield = c(50, 0)),
#     data = df_var[[i]]
#   )
#
#   model[[i]] <- nlme_model
# }
for (i in 1:length(var)) {
nlme_model <- gnls(
Yield ~ 1 / (Maintenance / Dilution + 1 / Max_yield),
params = list(Maintenance ~ Study, Max_yield ~ Study),
# random = Maintenance + Max_yield ~ 1 | Fermenter,
weights = varPower(),
start = c(Maintenance = c(0.05, 0),
Max_yield = c(50, 0)),
data = df_var[[i]]
)
model[[i]] <- nlme_model
}
#Get parameter estimates and standard error
for (i in 1:length(var)) {
emms_m[[i]] <- emmeans(model[[i]], param = "Maintenance", ~ Study)
emms_Yg[[i]] <- emmeans(model[[i]], param = "Max_yield", ~ Study)
}
#Get predicted yield and 95% confidence intervals
for (i in 1:length(var)) {
# Create a new data frame for predictions
ndat <- data.frame(Dilution = seq(0, max(df_var[[i]]$Dilution), by = 0.1))
ndat <- expand.grid(Dilution = ndat$Dilution, Study = levels(df_var[[i]]$Study))
# Predict using the nlme model
predictions <- predict_nlme(model[[i]], newdata = ndat, interval = "conf")
# Combine predictions with new data
df_pred[[i]] <- cbind(ndat, predictions)
}
# Plot data
for(i in 1:length(var))
{
#Get axis limits
x_min = 0
x_max <- max(df_var[[i]]$Dilution, na.rm = TRUE)*1.1
y_min = 0
y_max <- max(df_var[[i]]$Yield, na.rm = TRUE)*1.1
# Create plot
plot[[i]] =
# Call ggplot
ggplot() +
#Add confidence intervals
geom_ribbon(data = df_pred[[i]], aes(x = Dilution, ymin = Q2.5, ymax = Q97.5, fill = Study), alpha = 0.3) +
#Add prediction lines
geom_line(data = df_pred[[i]], aes(x=Dilution, y=Estimate, color = Study), linewidth = 0.5) +
#Plot points
geom_point(data = df_var[[i]], aes(x=Dilution, y=Yield, color = Study, shape = Group), fill=NA, size = 1, stroke = 0.5, alpha=1) +
# Set axis limits
scale_x_continuous(breaks = seq(x_min, x_max, by = 2)) +
ylim(y_min, y_max) +
# Set color, fill, and shape scales
scale_color_manual(values = c("Current" = red_color, "Isaacson et al. (1975)" = blue_color)) +
scale_fill_manual(values = c("Current" = red_color, "Isaacson et al. (1975)" = blue_color)) +
scale_shape_manual(values = c(21, 23, 22, 24)) +
# Set theme
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(colour = "black", family="Arial", size = 6.5),
axis.text.y = element_text(colour = "black", family = "Arial", size = 6.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.line = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)
)
plot[[i]]
}
#Print results
#Statistical models
#1/(g cells/mol carbohydrate)
summary(model[[2]])
summary(emms_m[[2]])
summary(emms_Yg[[2]])
#1/(g cells/mol ATP)
summary(model[[1]])
summary(emms_m[[1]])
summary(emms_Yg[[1]])
#Plots
#dilution vs. g cells/mol carbohydrate
plot[[2]]
#dilution vs. g cells/mol ATP
plot[[1]]
summary(emms_m[[2]])
summary(emms_Yg[[2]])
#1/(g cells/mol ATP)
summary(model[[1]])
summary(emms_m[[1]])
summary(emms_Yg[[1]])
shiny::runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
